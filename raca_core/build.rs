use std::io::Write;
use std::path::PathBuf;

fn main() {
    let manifest_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    let arch = std::env::var("CARGO_CFG_TARGET_ARCH").unwrap();
    // Tell cargo to pass the linker script to the linker..
    println!(
        "cargo:rustc-link-arg=-T{}/linker-{arch}.ld",
        manifest_dir.display()
    );
    // ..and to re-run if it changes.
    println!(
        "cargo:rerun-if-changed={}/linker-{arch}.ld",
        manifest_dir.display()
    );

    println!(
        "cargo:rerun-if-changed={}/src/syscall/syscall_numbers",
        manifest_dir.display()
    );

    let mut fout =
        std::fs::File::create(format!("{}/src/syscall/consts.rs", manifest_dir.display())).unwrap();
    writeln!(fout, "// Generated by build.rs. DO NOT EDIT.").unwrap();
    writeln!(fout, "use numeric_enum_macro::numeric_enum;\n").unwrap();
    writeln!(fout, "numeric_enum! {{").unwrap();
    writeln!(fout, "    #[repr(u32)]").unwrap();
    writeln!(fout, "    #[derive(Debug, Eq, PartialEq)]").unwrap();
    writeln!(fout, "    #[allow(non_camel_case_types)]").unwrap();
    writeln!(fout, "    #[allow(clippy::upper_case_acronyms)]").unwrap();
    writeln!(fout, "    pub enum SyscallType {{").unwrap();

    let data = std::fs::read_to_string(format!(
        "{}/src/syscall/syscall_numbers",
        manifest_dir.display()
    ))
    .unwrap();
    for line in data.lines() {
        if line.len() == 0 {
            continue;
        }
        let mut iter = line.split(' ');
        let name = iter.next().unwrap();
        let id = iter.next().unwrap();

        writeln!(fout, "        {} = {},", name, id).unwrap();
    }
    writeln!(fout, "    }}").unwrap();
    writeln!(fout, "}}").unwrap();
}
